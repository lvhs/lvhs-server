css:
  html, body, .container-fluid {
    min-height: 100%;
  }

  #event-entry {
    display: -webkit-flex;
    display: flex;
    align-items: center;
    -webkit-align-items: center;
    margin-bottom: 20px;
    padding-bottom: 20px;
    border-bottom: 1px solid #333;
  }

  .event-info {
    -webkit-flex-grow: 1;
    flex-grow: 1;
    margin-top: 18px;
    margin-left: 10px;
    max-width: 180px;
  }

  .entry-block {
    margin-left: 10px;
    margin-top: 18px;
  }

  .chat-image-block {
    /*border-top: 1px solid #fff;*/
    display: -webkit-flex;
    display: flex;
    padding-top: 10px;
  }

  .panel.panel-default {
    background-color: rgba(255,255,255,.85);
  }

  .bubble-top-left {
    position: absolute;
    width: 0;
    height: 0;
    top: 10px;
    left: -4px;
    border: 5px solid transparent;
    border-right: 10px solid #fff;
    opacity: .85;
    border-top: 0;
    border-bottom: 8px solid transparent;
  }

  .chat-image-left {
    border: 1.5px solid #fff;
    border-radius: 80px;
    width: 40px;
    height: 40px;
    margin-left: 10px;
    overflow: hidden;
  }

  .chat-name-left {
    color: #fff;
    padding-left: 10px;
  }

  .bubble-top-right {
    position: absolute;
    width: 0;
    height: 0;
    top: 10px;
    right: 1px;
    border-left: 10px solid #fff;
    opacity: .85;
    border-top: 0;
    border-bottom: 8px solid transparent;
  }

  .chat-image-right {
    border: 3px solid #fff;G
    border-radius: 80px;
    width: 40px;
    height: 40px;
    margin-right: 10px;
    overflow: hidden;
  }

  .chat-name-right {
    color: #fff;
    padding-right: 10px;
    text-align: right;
  }

  button.btn.btn-default {
    border-radius: 0;
  }
  .glyphicon-ok.active {
    color: #111;
  }
  button.btn.join-btn.active {
    background-color: #0095dd;
    border-color: #0095dd;
    opacity: 0.8;
  }

  .glyphicon-remove.active {
    color: #111;
  }
  button.btn.leave-btn.active {
    background-color: rgba(255,255,255,.5);
    border-color: #aaa;
  }

  .join-btn.inactive, .leave-btn.inactive {
    background-color: transparent;
    color: #fff;
  }

.container-fluid[style="color: #fff; " ng-app="chat" data-no-turbolink="true"]
  #event-entry.row[ng-controller="EventEntryController as entry"]
    .event-info
      span[style="font-size: 12px; font-weight: lighter;"] = @event.scheduled_at.strftime('%Y/%m/%d')
      br
      span = @event.artist.name
      br
      span[style="font-size: 12px; font-weight: lighter;"] #{@event.event_site.name} (#{@event.prefecture.name})

    .entry-block
      .btn-group.btn-group-lg[role="group"]
        button.btn.btn-default.join-btn[type="button" ng-class="{ active: entry.joined, inactive: !entry.joined }" ng-click="entry.updateEntryButton(true)"]
          span.glyphicon.glyphicon-ok[ng-class="{ active: entry.joined, inactive: !entry.joined }"]
        button.btn.btn-default.leave-btn[type="button" ng-class="{ active: !entry.joined, inactive: entry.joined }" ng-click="entry.updateEntryButton(false)"]
          span.glyphicon.glyphicon-remove[ng-class="{ active: !entry.joined, inactive: entry.joined }"]

  #event-chat[ng-controller="EventChatController as chat" style="margin-bottom: 50px;"]
    div[ng-if="chat.hasNoComment"]

    div[ng-repeat="comment in chat.comments"]

      / other user comment
      .row[ng-if="!chat.my(comment)" style="display: -webkit-flex; display: flex; margin-bottom: 10px;"]
        .chat-image-left[ng-click="chat.go_profile_path(comment.user)"]
          img[ng-src="{{ comment.user.image_url }}"]

        div[style="-webkit-flex-grow: 1; flex-grow: 1;"]
          .chat-name-left
            a[ng-href="{{ chat.profile_path(comment.user) }}" ng-bind="comment.user.name" style="color: #fff;"]
            span[ng-bind="comment.deco_created_at" style="float: right; font-size: 80%; color: #eee; margin-right: 20px;"]
          div[style="position: relative"]
            .bubble-top-left
          .panel.panel-default[style="margin: 0 10px;"]
            .panel-body[style="color: #333; padding: 8px 15px;" ng-bind-html="comment.body"]

      /- own comment
      .row[ng-if="chat.my(comment)" style="display: -webkit-flex; display: flex; margin-bottom: 10px;"]
        div[style="-webkit-flex-grow: 1; flex-grow: 1;"]
          span[ng-bind="comment.deco_created_at" style="float: left; font-size: 80%; color: #eee; margin-left: 20px;"]
          .chat-name-right[ng-bind="comment.user.name"]
          div[style="position: relative;"]
            .bubble-top-right
          .panel.panel-default[style="margin: 0 10px;"]
            .panel-body[style="color: #333; padding: 8px 15px;" ng-bind-html="comment.body"]
        .chat-image-right
          img[ng-src="{{ comment.user.image_url }}"]

    /- submit button
    .row[style="position: fixed; bottom: 0; width: 100%; opacity: .85;"]
      .input-group
        textarea.form-control[style="border-radius: 0;" rows="1" ng-model="chat.body"]
        span.input-group-btn
          button.btn.btn-default[style="border-radius: 0;" ng-click="chat.post()"] 投稿

script src="//ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular.min.js"
script src="//ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular-sanitize.js"
javascript:
  angular.module('chat', ['ngSanitize'])
    .controller('EventEntryController', ['$http', function($http) {
      this.joined = #{@event_entry.present?};
      var event_entry = #{raw @event_entry.to_json},
          user_id = #{@user.id},
          event_id = #{@event.id};

      this.updateEntryButton = function (entry) {
        if ((this.joined && entry) || !this.joined && !entry) {
          return;
        }
        if (entry) {
          $http
            .post(Routes.app_event_entry_index_path(event_id), {
              event_id: event_id,
              user_id: user_id
            }, {
              responseType: 'json'
            })
            .success(_.bind(function (data) {
              event_entry = data;
              this.joined = entry;
            }, this))
            .error(function(){

            });
        } else {
          $http
            .delete(Routes.app_event_entry_path(event_id, event_entry.id), {
              responseType: 'json'
            })
            .success(_.bind(function () {
              event_entry = null;
              this.joined = entry;
            }, this))
            .error(function(){

            });
        }
      };
    }])
    .controller('EventChatController', ['$http', '$window', function($http, $window) {
      this.comments = #{raw @event_comments.to_json};

      this.hasNoComment = function () {
        return this.comments.length === 0;
      };

      this.user = {
        id: #{@user.id},
        name: "#{@user.name}",
        image_url: "#{image_url(@user.image_path)}"
      };

      this.profile_path = function (user) {
        return Routes.app_user_path(user);
      };

      this.go_profile_path = function (user) {
        location.href = Routes.app_user_path(user);
      };

      this.my = function (comment) {
        return comment.user.id === this.user.id;
      };

      this.post = function () {
        if (!this.body) {
          return;
        }
        $http
          .post(Routes.app_event_comments_path(#{@event.id}), {
            event_id: #{@event.id},
            user_id: #{@user.id},
            body: this.body
          })
          .success(_.bind(function() {
            this.comments.push({
              body: this.body.replace(/\n/g, '<br/>'),
              user: this.user
            });
            this.body = "";
            setTimeout(function() {
              $window.scrollTo(0, angular.element(document).height())
            }, 300);
          }, this))
          .error(function () {

          });
      };
    }]);
